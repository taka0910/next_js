"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { BackButton } from "@/components/back-button"
import { Gift, Plus, Heart, Star, ExternalLink, Trash2 } from "lucide-react"
import { useRouter } from "next/navigation"

export default function WishlistPage() {
  const [wishlist, setWishlist] = useState([
    {
      id: 1,
      title: "Êñ∞„Åó„ÅÑ„Ç´„Éï„Çß„Åß„Éá„Éº„Éà",
      description: "„Ç§„É≥„Çπ„Çø„ÅßË¶ã„Å§„Åë„Åü„Åä„Åó„ÇÉ„Çå„Å™„Ç´„Éï„Çß",
      price: 3000,
      priority: "È´ò",
      category: "„Éá„Éº„Éà",
      addedBy: "„ÅÇ„Å™„Åü",
      url: "https://example.com",
      achieved: false,
    },
    {
      id: 2,
      title: "„Éû„ÉÉ„Çµ„Éº„Ç∏30ÂàÜ",
      description: "ËÇ©„Åì„Çä„Åå„Å≤„Å©„ÅÑ„ÅÆ„Åß...",
      price: 0,
      priority: "‰∏≠",
      category: "„É™„É©„ÉÉ„ÇØ„Çπ",
      addedBy: "„Éë„Éº„Éà„Éä„Éº",
      url: "",
      achieved: false,
    },
    {
      id: 3,
      title: "Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†",
      description: "‰∏ÄÁ∑í„Å´„Åß„Åç„Çã„Éë„Ç∫„É´„Ç≤„Éº„É†",
      price: 5000,
      priority: "‰Ωé",
      category: "Â®ØÊ•Ω",
      addedBy: "„ÅÇ„Å™„Åü",
      url: "https://example.com",
      achieved: true,
    },
    {
      id: 4,
      title: "Ê∏©Ê≥âÊóÖË°å",
      description: "ÁÆ±Ê†π„ÅÆÊ∏©Ê≥â„Å´Ë°å„Åç„Åü„ÅÑ",
      price: 25000,
      priority: "È´ò",
      category: "ÊóÖË°å",
      addedBy: "„Éë„Éº„Éà„Éä„Éº",
      url: "",
      achieved: false,
    },
  ])

  const [showAddItem, setShowAddItem] = useState(false)
  const [newItem, setNewItem] = useState({
    title: "",
    description: "",
    price: "",
    priority: "",
    category: "",
    url: "",
  })

  const router = useRouter()

  const addItem = () => {
    if (newItem.title && newItem.priority && newItem.category) {
      setWishlist((prev) => [
        ...prev,
        {
          id: Date.now(),
          title: newItem.title,
          description: newItem.description,
          price: Number.parseInt(newItem.price) || 0,
          priority: newItem.priority,
          category: newItem.category,
          addedBy: "„ÅÇ„Å™„Åü",
          url: newItem.url,
          achieved: false,
        },
      ])
      setNewItem({
        title: "",
        description: "",
        price: "",
        priority: "",
        category: "",
        url: "",
      })
      setShowAddItem(false)
    }
  }

  const removeItem = (id: number) => {
    setWishlist((prev) => prev.filter((item) => item.id !== id))
  }

  const toggleAchieved = (id: number) => {
    setWishlist((prev) => prev.map((item) => (item.id === id ? { ...item, achieved: !item.achieved } : item)))
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "È´ò":
        return "bg-red-100 text-red-700"
      case "‰∏≠":
        return "bg-yellow-100 text-yellow-700"
      case "‰Ωé":
        return "bg-green-100 text-green-700"
      default:
        return "bg-gray-100 text-gray-700"
    }
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "„Éá„Éº„Éà":
        return "üíï"
      case "„É™„É©„ÉÉ„ÇØ„Çπ":
        return "üßò‚Äç‚ôÄÔ∏è"
      case "Â®ØÊ•Ω":
        return "üéÆ"
      case "ÊóÖË°å":
        return "‚úàÔ∏è"
      case "„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥":
        return "üëó"
      case "„Ç∞„É´„É°":
        return "üçΩÔ∏è"
      default:
        return "üéÅ"
    }
  }

  const activeItems = wishlist.filter((item) => !item.achieved)
  const achievedItems = wishlist.filter((item) => item.achieved)

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-orange-50 to-red-50">
      <header className="bg-white/80 backdrop-blur-sm border-b border-pink-100 sticky top-0 z-50">
        <div className="max-w-md mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <BackButton href="/" />
              <div className="flex items-center gap-2">
                <Gift className="w-6 h-6 text-pink-500" />
                <h1 className="font-bold text-lg text-gray-800">„Åä„Å≠„Å†„Çä„É™„Çπ„Éà</h1>
              </div>
            </div>
            <Button size="sm" className="bg-pink-500 hover:bg-pink-600" onClick={() => setShowAddItem(!showAddItem)}>
              <Plus className="w-4 h-4 mr-1" />
              ËøΩÂä†
            </Button>
          </div>
        </div>
      </header>

      <div className="max-w-md mx-auto px-4 py-6 space-y-6">
        {/* Stats */}
        <div className="grid grid-cols-3 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-pink-600">{activeItems.length}</div>
              <div className="text-sm text-gray-500">Ê¨≤„Åó„ÅÑ„ÇÇ„ÅÆ</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">{achievedItems.length}</div>
              <div className="text-sm text-gray-500">ÈÅîÊàêÊ∏à„Åø</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-orange-600">
                ¬•{activeItems.reduce((sum, item) => sum + item.price, 0).toLocaleString()}
              </div>
              <div className="text-sm text-gray-500">Á∑èÈ°ç</div>
            </CardContent>
          </Card>
        </div>

        {/* Add Item Form */}
        {showAddItem && (
          <Card className="bg-pink-50 border-pink-200">
            <CardHeader>
              <CardTitle className="text-lg">Êñ∞„Åó„ÅÑÊ¨≤„Åó„ÅÑ„ÇÇ„ÅÆ„ÇíËøΩÂä†</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Input
                placeholder="Ê¨≤„Åó„ÅÑ„ÇÇ„ÅÆÔºà‰æãÔºöÊñ∞„Åó„ÅÑ„Ç´„Éï„Çß„Åß„Éá„Éº„ÉàÔºâ"
                value={newItem.title}
                onChange={(e) => setNewItem((prev) => ({ ...prev, title: e.target.value }))}
              />
              <Textarea
                placeholder="Ë©≥Á¥∞Ë™¨ÊòéÔºà‰ªªÊÑèÔºâ"
                value={newItem.description}
                onChange={(e) => setNewItem((prev) => ({ ...prev, description: e.target.value }))}
                className="min-h-[60px]"
              />
              <Input
                placeholder="‰∫àÁÆóÔºàÂÜÜÔºâ"
                type="number"
                value={newItem.price}
                onChange={(e) => setNewItem((prev) => ({ ...prev, price: e.target.value }))}
              />
              <Select
                value={newItem.priority}
                onValueChange={(value) => setNewItem((prev) => ({ ...prev, priority: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="ÂÑ™ÂÖàÂ∫¶" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="È´ò">È´ò</SelectItem>
                  <SelectItem value="‰∏≠">‰∏≠</SelectItem>
                  <SelectItem value="‰Ωé">‰Ωé</SelectItem>
                </SelectContent>
              </Select>
              <Select
                value={newItem.category}
                onValueChange={(value) => setNewItem((prev) => ({ ...prev, category: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="„Ç´„ÉÜ„Ç¥„É™" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="„Éá„Éº„Éà">„Éá„Éº„Éà</SelectItem>
                  <SelectItem value="„É™„É©„ÉÉ„ÇØ„Çπ">„É™„É©„ÉÉ„ÇØ„Çπ</SelectItem>
                  <SelectItem value="Â®ØÊ•Ω">Â®ØÊ•Ω</SelectItem>
                  <SelectItem value="ÊóÖË°å">ÊóÖË°å</SelectItem>
                  <SelectItem value="„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥">„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥</SelectItem>
                  <SelectItem value="„Ç∞„É´„É°">„Ç∞„É´„É°</SelectItem>
                  <SelectItem value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</SelectItem>
                </SelectContent>
              </Select>
              <Input
                placeholder="ÂèÇËÄÉURLÔºà‰ªªÊÑèÔºâ"
                value={newItem.url}
                onChange={(e) => setNewItem((prev) => ({ ...prev, url: e.target.value }))}
              />
              <div className="flex gap-2">
                <Button onClick={addItem} className="flex-1">
                  ËøΩÂä†
                </Button>
                <Button variant="outline" onClick={() => setShowAddItem(false)}>
                  „Ç≠„É£„É≥„Çª„É´
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Active Wishlist */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Star className="w-5 h-5 text-yellow-500" />
              Ê¨≤„Åó„ÅÑ„ÇÇ„ÅÆ„É™„Çπ„Éà
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {activeItems.length > 0 ? (
              activeItems.map((item) => (
                <div
                  key={item.id}
                  className="p-4 bg-white rounded-lg border border-gray-200 hover:shadow-md transition-shadow"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-start gap-3 flex-1">
                      <div className="text-2xl">{getCategoryIcon(item.category)}</div>
                      <div className="flex-1">
                        <h3 className="font-medium text-gray-800 mb-1">{item.title}</h3>
                        {item.description && <p className="text-sm text-gray-600 mb-2">{item.description}</p>}
                        <div className="flex items-center gap-2 mb-2">
                          <Badge className={getPriorityColor(item.priority)}>{item.priority}ÂÑ™ÂÖàÂ∫¶</Badge>
                          <Badge variant="outline" className="text-xs">
                            {item.category}
                          </Badge>
                          <Avatar className="w-5 h-5">
                            <AvatarFallback className="bg-pink-200 text-pink-700 text-xs">
                              {item.addedBy === "„ÅÇ„Å™„Åü" ? "„ÅÇ" : "„Éë"}
                            </AvatarFallback>
                          </Avatar>
                        </div>
                        {item.price > 0 && (
                          <div className="text-lg font-bold text-green-600">¬•{item.price.toLocaleString()}</div>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      onClick={() => toggleAchieved(item.id)}
                      className="bg-green-500 hover:bg-green-600"
                    >
                      <Heart className="w-3 h-3 mr-1" />
                      ÈÅîÊàê
                    </Button>
                    {item.url && (
                      <Button size="sm" variant="outline" asChild>
                        <a href={item.url} target="_blank" rel="noopener noreferrer">
                          <ExternalLink className="w-3 h-3 mr-1" />
                          Ë©≥Á¥∞
                        </a>
                      </Button>
                    )}
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => removeItem(item.id)}
                      className="text-red-600 hover:text-red-700"
                    >
                      <Trash2 className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              ))
            ) : (
              <p className="text-gray-500 text-center py-8">„Åæ„Å†Ê¨≤„Åó„ÅÑ„ÇÇ„ÅÆ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
            )}
          </CardContent>
        </Card>

        {/* Achieved Items */}
        {achievedItems.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <Heart className="w-5 h-5 text-green-500" />
                ÈÅîÊàêÊ∏à„Åø
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {achievedItems.map((item) => (
                <div key={item.id} className="p-4 bg-green-50 rounded-lg border border-green-200 opacity-75">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-3 flex-1">
                      <div className="text-2xl">{getCategoryIcon(item.category)}</div>
                      <div className="flex-1">
                        <h3 className="font-medium text-gray-800 mb-1 line-through">{item.title}</h3>
                        {item.description && <p className="text-sm text-gray-600 mb-2">{item.description}</p>}
                        <Badge className="bg-green-100 text-green-700">ÈÅîÊàêÊ∏à„Åø ‚úì</Badge>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
